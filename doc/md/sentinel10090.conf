# 当前Sentinel服务运行的端口
port 10090
# 保护模式 no
protected-mode no

# Sentinel去监视一个名为mymaster的主redis实例，
# 这个主实例的IP地址为本机地址127.0.0.1，端口号为6379，
# 而将这个主实例判断为失效至少需要2个Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行
# 如果提供外网访问，实例的IP地址为服务器地址10.0.128.144。
# sentinel monitor mymaster 10.0.128.144 6379 2
sentinel monitor mymaster 192.168.1.181 10080 1

# 当前sentinel实例是否允许实施“failover”(故障转移)  
# no表示当前sentinel为“观察者”(只参与"投票".不参与实施failover)，  
# 全局中至少有一个为yes  
# sentinel can-failover mymaster yes

# down-after-milliseconds指定了Sentinel认为Redis实例已经失效所需的毫秒数。
# 当实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。
# 只有一个Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线。
# 这时自动故障迁移才会执行
sentinel down-after-milliseconds mymaster 1000

# 当新master产生时，同时进行“slaveof”到新master并进行“SYNC”的slave个数。  
# 默认为1,建议保持默认值  
# 在salve执行salveof与同步时，将会终止客户端请求。  
# 此值较大，意味着“集群”终止客户端请求的时间总和和较大。  
# 此值较小,意味着“集群”在故障转移期间，多个salve向客户端提供服务时仍然使用旧数据。  
sentinel parallel-syncs mymaster 1

# 如果在failover-timeout该时间（ms）内未能完成failover操作，则认为该failover失败
sentinel failover-timeout mymaster 3000